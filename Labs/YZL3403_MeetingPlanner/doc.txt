
1. Django framework indiriyoruz
    python -m pip install django

2. Projemin omurgasını oluşturacak dosyaları yaratıyoruz.
    django-admin startproject meeting_planner

3. Projemizi ayağı kaldırırken manage.py dosyasını kullanıyoruz. Bu bağlamda aşağıdaki terminal kodu ile manage.py dosyasının bulunduğu dizine yürüyorum
    cd meeting_planner

4. Artık projemizi ayağı kaldırabiliriz.
    python manage.py runserver

5. İlk custom appi ekleyelim. Bu app içerisinde static web sayfalarımı yöneteceğim.
    python manage.py startapp website

6. Bir app yaratıldığında ivedi bir biçimde meeting_planner altındaki settings.py dosyasına gelip ilgili appi ekliyoruz.
    INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'website', # sadece bu satır eklendi
]

7. website => views.py dosyasına aşağıdaki kodu ekleyin. Servera gelen talebi icra etmek için bir fonksiyon yazdık.
    # Request => http://127.0.0.1:8000/welcome.html
    def welcome(request):
        return HttpResponse('Welcome to the Meeting Planner App')

8. meeting_planner altındaki urls.py dosyasına aşağıdaki kodu ekleyin.
    from django.urls import path
    from website.views import welcome # bu satır eklendi

    urlpatterns = [
        path('admin/', admin.site.urls),
        path('welcome.html', welcome), # bu satır eklendi
    ]

9. Request => http://127.0.0.1:8000/date bu talep için 7. ve 8. adımları tekrar edin.

10. meetings adında yeni bir app ekliyoruz.
    python manage.py startapp meetings

11. meetings => models.py dosyası altına ORM gereği modeli yaratıyoruz. Yani veritabanının bir yansımasını (kopyasını) yani bir benzerini models.py dosyası altında yaratıyoruz.

12. terminal ekranına gelerek göç (migration) işlemini başlatıyoruz. Burada Code First yaklaşımını kullanarak 11.adımda yaratılan modeli veritabanına göç ettirerek veritabanının
yaratılmasını sağlıyoruz.
    12.1. python manage.py makemigrations
    12.2. python manage.py migrate

13. Admin yaratmak için aşağıdaki kodu terminalde icra edelim.
    13.1. python manage.py createsuperuser

14. meetings => admin.py altında modelsteki sınıflar tegister edilir.

15. admin panelinden room ve meeting create edilir

16. meeting_planner => static adında bir directory açılır.
    16.1 meeting_planner => static => css klasörü açılır.
    16.2 meeting_planner => static => js klasörü açılır.
    16.2 meeting_planner => settings.py => aşağıdaki kodu static files bölgesine yazıyoruz
    STATIC_URL = 'static/'
    STATICFILES_DIRS = [
        BASE_DIR / 'static'
    ]

17. website => templates klasörü açılır.
    17.1 base.html sayfası eklenir. AdminLTE boostrap projesinden uygun layout buraya alınır.
    17.2 base.html'de render edilecek alan saptanır ve render edilir.
    <!-- Content Wrapper. Contains page content -->
      <div class="content-wrapper">
        {% block content %}

        {% endblock %}
      </div>
    <!-- /.content-wrapper -->
    17.3 website => templates => website

18. Projeyi çalıştıdık css olmayan kötü bir görüntü ile karlışatık. Şimdi AdminLTE'nin kaynak css'lerini alıp kendi projemize static alanında hazırladığımız klasöre ekliyoruz. Neye ihtiyacımız varsa onu alacağız fazlasını değil.

19. website => views.py => welcome() aşağıdaki hale getirin.
    def welcome(request):
    data = Meeting.objects.all() # SQL => select * from Meetings
    return render(
        request,
        'website/welcome.html',
        {'message': 'This data was sent from the views to the template',
         'num_meetings': Meeting.objects.count(),
         'meetings': data
         }
    )

20. website => templates => website => welcome.html dosyasını gerekli düzenlemeleri yapın.

21. website => templates => partials klasörü açılır

22. website => templates => partials => _navbar.html dosyası açılır

23. base.html'den navbar kopyanalarak "_navbar" yapıştırılır. "base.html" dönerek partial çağırılır. Bunu footer, main side container vs için de yapabilirsiniz.

24. meetings => views.py aşağıdaki kodu ekleyin.
    def detail(request, id):
        meeting = get_object_or_404(Meeting, pk=id)
        return render(request, 'meetings/detail.html', {'meeting': meeting})

25. meetings => templates klasörü açılır.

26. meetings => templates => meetings klasörü açılır

27. meetings => templates => meetings => detail.html dosyası açılır.

28. meetings => urls.py dosyası açılır

29. meeting_planner => urls.py dosyasına "meetings.urls.py" include edilir.

30. meeting_planner => urls.py dosyasındaki "welcome" sayfası için hazırlanan url düzenleyin
    path('', welcome, name='welcome'),

31. meetings => forms.py dosyası açılır.

32. meetings => views.py => create fonksiyonu yazılır.

33. meetings => urls.py => create url eklenir.

34. meetings => templates => meetings => create.html açılır.

35. Formlarda boostrap form yapısını kullanmak için
    35.1. pip install django-bootstrap-v5
    35.2. website => templates => website => base.html head bloğuna "{% load bootstrap5 %}" ekle
    35.3. bootstrap form kullanmak istediğin sayfalarda "{% load bootstrap5 %}" ekle

36. meetings => views.py => update fonksiyonu yazılır

37. meetings => urls.py => update url ekle

38. meetings => templates => meetigns => update.html açılır.

39. meetings => views.py => delete fonksiyonu yazılır

40. meetings => urls.py => delete url ekle

41. meetings => templates => meetigns => delete.html açılır.

42. room app create edilir.
    42.1 python manage.py startapp room

43. meeting_planner => settings.py => INSTALLED_APPS listesine "room" register edilir.

