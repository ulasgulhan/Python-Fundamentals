
1. pip install django

2. django-admin startproject ecommerce

3. cd ecommerce => python manage.py runserver

4. django-admin startapp store

5. ecommerce => settings => INSTALLED_APPS listesine 'store' appini register et.

6. store => models dizayn edilir.

7. modeli veritabanına göç ettirelim
    7.1. python manage.py makemigrations
    7.2. python manage.py migrate

8. static dosyalar için ayarlamaları yapın.
    8.1. ecommerce => static adında bir directory açalım
    8.2. ecommerce => static => css, js, media adında klasörleri yaratalım.
    8.3. ecommerce => ecommerce => setting.py dosyasına aşağıdaki kodları ekleyin
        STATIC_URL = '/static/'
        STATICFILES_DIRS = [BASE_DIR / 'static']
        MEDIA_URL = '/media/'
        MEDIA_ROOT = BASE_DIR / 'static/media'
    8.4. ecommerce => ecommerce => urls.py dosyasına aşağıdaki kodları ekleyin
        from django.conf.urls.static import static
        from django.conf import settings

        urlpatterns = [
            path('admin/', admin.site.urls),
        ]
        urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

9. ecommerce => store => admin.py aşağıdaki kodları ekleyin.
    from django.contrib import admin
    from .models import Category, Product

    # Register your models here.


    class CategoryAdmin(admin.ModelAdmin):
        prepopulated_fields = {
            'slug': ('name',)
        }

        fields = ['name', 'slug']


    class ProductAdmin(admin.ModelAdmin):
        prepopulated_fields = {
            'slug': ('title',)
        }

        fields = ['title', 'slug', 'description', 'price', 'image', 'category']


    admin.site.register(Category, CategoryAdmin) # Decorator olarak classın tepesine yazabiliriz.
    admin.site.register(Product, ProductAdmin)

10. admin site tarafına giriş yapmak için user yaratın
    10.1. python manage.py createsuperuser

11. store => templates klasörü açalım

12. store => templates => base.html açalım

13. store => templates => _navbar.html açalım ve bunu base.html'de include edelim.

14. store => views.py => store() fonksiyonunu yazalım.

15. store => urls.py dosyası açılır

16. ecommerce => urls.py dosyasına store/urls.py include edilir.

17. store => templates => store.html açılır

18. store => views.py => categories() fonksiyonunu yaz.

19. ecommerce => settings => TEMPLATE[] categries() fonksiyonunu register et

20. store => templates => _navbar.html'de dropdown menüyü organize et

21. store => views.py => list_category() fonksiyonunu yaz

22. store => urls.py => list_category() fonksiyonunu ekle

23. store => template => list-category.html dosyasını yaratın

24. account app yarat
    24.1. python manage.py startapp account
    24.2. ecommerce => settings.py => INSTALLED_APPS listesine 'account' register et.

25. account => forms.py dosyası açılır

26. account => views.py => register() fonksiyonu yazılır.

27. account => urls.py dosyası açılır
    26.1. ecommerce => urls.py dosyasına account url register edilir

28. account => templates klasörü açılır

29. account => templates => register.html açılır.

30. store => templates => _navbar.html içerisine tasarıma uygun bir şekilde aşağıdaki kodları ekleyin
        {% if user.is_authenticated %}
          <li class="nav-item">
            <a class="btn btn-sm btn-success fload-end" type="button" href="#">
              <i class="fa fa-home" aria-hidden="true">&nbsp; Dashboard</i>
            </a>
          </li>
          <li class="nav-item">
            <a class="btn btn-sm btn-danger ms-2 me-2 fload-end" type="button" href="#">
              <i class="fa fa-sign-out" aria-hidden="true">&nbsp; Logout</i>
            </a>
          </li>
        {% else %}
          <li class="nav-item">
            <a class="btn btn-sm btn-success fload-end" type="button" href="#">
              <i class="fa fa-sign-in" aria-hidden="true">&nbsp; Sign In</i>
            </a>
          </li>
          <li class="nav-item">
            <a class="btn btn-sm btn-danger ms-2 me-2 fload-end" type="button" href="{% url 'register' %}">
              <i class="fa fa-user-plus" aria-hidden="true">&nbsp; Sign Up</i>
            </a>
          </li>
        {% endif %}

31. account => views.py my_login() fonksiyonunu yazın

32. account => urls.py my_login url ekleyin

33. account => tempaltes => my-login.html ekleyin

34. account => views.py => user_logout() fonksiyonunu yazın

35. account => urls.py user_logiout url ekleyin

36. store => templates => _navbar.html => user_logout href yazılır

37. accpımt => views.py => profile_management() fonksiyonunu yazın

38. account => urls.py profile_management url ekleyin

39. account => templates => profile_management.html eklenir.

40. account => views.py => delete_account() fonksiyonunu yazın

41. account => urls.py => delete_account url ekleyin

42. account => templates => delete-account.html eklenir

Not: store => templates => _navbar.html hrefleri kontrol etmeyi unutmayın

43. cart app eklenir
    43.1. python manage.py startapp cart
    43.2. ecommerce => settings => INSTALLED_APPS listesine "cart" app register et
    43.3. cart.py oluşturulur
    43.4. context_processors.py oluşturulur
    43.5. ecommerce => settings.py => TEMPLATES listesine 'context_processors' eklenir
    43.6. store => _navbar.html 'cart' için değişiklik yapılır
          <li class="nav-item">
            <a class="btn btn-sm btn-secondary ms-2 me-2 fload-end" type="button" href="{% url 'cart-summary' %}">
              <i class="fa fa-shopping-cart" aria-hidden="true">&nbsp;</i>
              <div id="cart-qty" class="d-inline-flex">
                {% with qty_amount=cart|length %}
                  {% if qty_amount > 0 %}
                    {{ qty_amount }}
                  {% else %}
                    0
                  {% endif %}
                {% endwith %}
              </div>
            </a>
          </li>
    43.7. views.py dosyasında CRUD fonksiyonlarını yazın
    43.8. urls.py yaratılır ve ecommerce => urls.py include edilir.
    44.9. templates klasörü yaratılır. CRUD operasyonları için html sayfaları yaratılır.
